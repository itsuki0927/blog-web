
SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

CREATE SCHEMA IF NOT EXISTS "public";

ALTER SCHEMA "public" OWNER TO "pg_database_owner";

CREATE TYPE "public"."blogMood" AS ENUM (
    'happy',
    'sad',
    'neutral'
);

ALTER TYPE "public"."blogMood" OWNER TO "postgres";

CREATE TYPE "public"."blogState" AS ENUM (
    'draft',
    'published',
    'trash'
);

ALTER TYPE "public"."blogState" OWNER TO "postgres";

CREATE TYPE "public"."commentState" AS ENUM (
    'auditing',
    'published',
    'spam',
    'trash',
    'deleted'
);

ALTER TYPE "public"."commentState" OWNER TO "postgres";

CREATE OR REPLACE FUNCTION "public"."views_increment"(x integer, row_id integer) RETURNS void
    LANGUAGE "sql"
    AS $$
  update blog 
  set views = views + x
  where id = row_id
$$;

ALTER FUNCTION "public"."views_increment"(x integer, row_id integer) OWNER TO "postgres";

SET default_tablespace = '';

SET default_table_access_method = "heap";

CREATE TABLE IF NOT EXISTS "public"."blog" (
    "id" bigint NOT NULL,
    "createdAt" timestamp with time zone DEFAULT now(),
    "updatedAt" timestamp with time zone DEFAULT now(),
    "comments" integer DEFAULT 0,
    "content" text NOT NULL,
    "cover" text NOT NULL,
    "description" text NOT NULL,
    "keywords" text[] NOT NULL,
    "views" integer DEFAULT 0,
    "title" text NOT NULL,
    "slug" text NOT NULL,
    "forbiddedComment" boolean DEFAULT false,
    "favorite" boolean,
    "reactions" jsonb DEFAULT '{"reactions": [0, 0, 0, 0]}'::jsonb,
    "mood" public."blogMood" DEFAULT 'happy'::public."blogMood",
    "state" public."blogState" DEFAULT 'draft'::public."blogState",
    "categoryId" bigint
);

ALTER TABLE "public"."blog" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."blogTag" (
    "blogId" integer NOT NULL,
    "tagId" integer NOT NULL
);

ALTER TABLE "public"."blogTag" OWNER TO "postgres";

ALTER TABLE "public"."blog" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."blog_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."category" (
    "id" bigint NOT NULL,
    "createdAt" timestamp with time zone,
    "updatedAt" timestamp with time zone,
    "count" integer DEFAULT 0 NOT NULL,
    "description" text,
    "expand" text,
    "title" text NOT NULL,
    "slug" text NOT NULL,
    "sort" integer DEFAULT 0
);

ALTER TABLE "public"."category" OWNER TO "postgres";

ALTER TABLE "public"."category" ALTER COLUMN "id" ADD GENERATED ALWAYS AS IDENTITY (
    SEQUENCE NAME "public"."category_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."comment" (
    "id" bigint NOT NULL,
    "createdAt" timestamp with time zone DEFAULT now() NOT NULL,
    "updatedAt" timestamp with time zone DEFAULT now(),
    "nickname" character varying DEFAULT ''::character varying NOT NULL,
    "content" text NOT NULL,
    "email" character varying NOT NULL,
    "slug" character varying,
    "blogId" bigint NOT NULL,
    "parentId" bigint,
    "avatar" character varying DEFAULT ''::character varying,
    "emoji" jsonb DEFAULT '{}'::jsonb,
    "state" smallint DEFAULT '0'::smallint NOT NULL,
    "ip" text,
    "userAgent" jsonb,
    "geo" jsonb
);

ALTER TABLE "public"."comment" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."comment_dev" (
    "id" bigint NOT NULL,
    "createdAt" timestamp with time zone DEFAULT now() NOT NULL,
    "updatedAt" timestamp with time zone DEFAULT now(),
    "nickname" character varying DEFAULT ''::character varying NOT NULL,
    "content" text NOT NULL,
    "email" character varying NOT NULL,
    "slug" character varying,
    "blogId" bigint NOT NULL,
    "parentId" bigint,
    "avatar" character varying DEFAULT ''::character varying,
    "emoji" jsonb DEFAULT '{}'::jsonb,
    "ip" text,
    "userAgent" jsonb,
    "geo" jsonb,
    "state" public."commentState" DEFAULT 'auditing'::public."commentState",
    "isDev" boolean DEFAULT false
);

ALTER TABLE "public"."comment_dev" OWNER TO "postgres";

ALTER TABLE "public"."comment_dev" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."comment_dev_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

ALTER TABLE "public"."comment" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."comment_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."tag" (
    "id" bigint NOT NULL,
    "createdAt" timestamp with time zone,
    "updatedAt" timestamp with time zone,
    "count" integer DEFAULT 0 NOT NULL,
    "description" text,
    "expand" text,
    "title" text NOT NULL,
    "slug" text NOT NULL,
    "sort" integer DEFAULT 0
);

ALTER TABLE "public"."tag" OWNER TO "postgres";

ALTER TABLE "public"."tag" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."tag_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

ALTER TABLE ONLY "public"."blog"
    ADD CONSTRAINT "blog_id_key" UNIQUE ("id");

ALTER TABLE ONLY "public"."blog"
    ADD CONSTRAINT "blog_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."blogTag"
    ADD CONSTRAINT "blog_tags_pkey" PRIMARY KEY ("blogId", "tagId");

ALTER TABLE ONLY "public"."category"
    ADD CONSTRAINT "category_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."comment_dev"
    ADD CONSTRAINT "comment_dev_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."comment"
    ADD CONSTRAINT "comment_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."tag"
    ADD CONSTRAINT "tag_id_key" UNIQUE ("id");

ALTER TABLE ONLY "public"."tag"
    ADD CONSTRAINT "tag_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."blogTag"
    ADD CONSTRAINT "blogTag_blogId_fkey" FOREIGN KEY ("blogId") REFERENCES public.blog(id);

ALTER TABLE ONLY "public"."blogTag"
    ADD CONSTRAINT "blogTag_tagId_fkey" FOREIGN KEY ("tagId") REFERENCES public.tag(id);

ALTER TABLE ONLY "public"."blog"
    ADD CONSTRAINT "blog_categoryId_fkey" FOREIGN KEY ("categoryId") REFERENCES public.category(id) ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE "public"."blog" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."blogTag" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."category" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."comment_dev" ENABLE ROW LEVEL SECURITY;

CREATE POLICY "delete_blogTag_policy" ON "public"."blogTag" FOR DELETE TO authenticated USING ((auth.uid() = 'c41aa31d-3057-4c4b-a785-0567365c84a9'::uuid));

CREATE POLICY "delete_blog_policy" ON "public"."blog" FOR DELETE TO authenticated USING (('c41aa31d-3057-4c4b-a785-0567365c84a9'::uuid = auth.uid()));

CREATE POLICY "delete_category_policy" ON "public"."category" FOR DELETE TO authenticated USING ((auth.uid() = 'c41aa31d-3057-4c4b-a785-0567365c84a9'::uuid));

CREATE POLICY "delete_comment_policy" ON "public"."comment_dev" FOR DELETE TO authenticated USING (('c41aa31d-3057-4c4b-a785-0567365c84a9'::uuid = auth.uid()));

CREATE POLICY "delete_tag_policy" ON "public"."tag" FOR DELETE TO authenticated USING (('c41aa31d-3057-4c4b-a785-0567365c84a9'::uuid = auth.uid()));

CREATE POLICY "insert_blogTag_policy" ON "public"."blogTag" FOR INSERT TO authenticated WITH CHECK ((auth.uid() = 'c41aa31d-3057-4c4b-a785-0567365c84a9'::uuid));

CREATE POLICY "insert_blog_policy" ON "public"."blog" FOR INSERT TO authenticated WITH CHECK ((auth.uid() = 'c41aa31d-3057-4c4b-a785-0567365c84a9'::uuid));

CREATE POLICY "insert_category_policy" ON "public"."category" FOR INSERT TO authenticated WITH CHECK ((auth.uid() = 'c41aa31d-3057-4c4b-a785-0567365c84a9'::uuid));

CREATE POLICY "insert_comment_policy" ON "public"."comment" FOR INSERT TO authenticated WITH CHECK (('c41aa31d-3057-4c4b-a785-0567365c84a9'::uuid = auth.uid()));

CREATE POLICY "insert_comment_policy" ON "public"."comment_dev" FOR INSERT TO authenticated WITH CHECK (('c41aa31d-3057-4c4b-a785-0567365c84a9'::uuid = auth.uid()));

CREATE POLICY "insert_tag_policy" ON "public"."tag" FOR INSERT TO authenticated WITH CHECK (('c41aa31d-3057-4c4b-a785-0567365c84a9'::uuid = auth.uid()));

CREATE POLICY "read_blogTag_policy" ON "public"."blogTag" FOR SELECT USING (true);

CREATE POLICY "read_blog_policy" ON "public"."blog" FOR SELECT USING (((auth.uid() = 'c41aa31d-3057-4c4b-a785-0567365c84a9'::uuid) OR (state = 'published'::public."blogState")));

CREATE POLICY "read_category_policy" ON "public"."category" FOR SELECT USING (true);

CREATE POLICY "read_comment_policy" ON "public"."comment_dev" FOR SELECT USING (((auth.uid() = 'c41aa31d-3057-4c4b-a785-0567365c84a9'::uuid) OR (state = 'auditing'::public."commentState") OR (state = 'published'::public."commentState")));

CREATE POLICY "read_tag_policy" ON "public"."tag" FOR SELECT USING (true);

ALTER TABLE "public"."tag" ENABLE ROW LEVEL SECURITY;

CREATE POLICY "update_blogTag_policy" ON "public"."blogTag" FOR UPDATE TO authenticated USING (('c41aa31d-3057-4c4b-a785-0567365c84a9'::uuid = auth.uid())) WITH CHECK ((auth.uid() = 'c41aa31d-3057-4c4b-a785-0567365c84a9'::uuid));

CREATE POLICY "update_blog_policy" ON "public"."blog" FOR UPDATE TO authenticated USING (('c41aa31d-3057-4c4b-a785-0567365c84a9'::uuid = auth.uid())) WITH CHECK (('c41aa31d-3057-4c4b-a785-0567365c84a9'::uuid = auth.uid()));

CREATE POLICY "update_category_policy" ON "public"."category" FOR UPDATE TO authenticated USING ((auth.uid() = 'c41aa31d-3057-4c4b-a785-0567365c84a9'::uuid)) WITH CHECK ((auth.uid() = 'c41aa31d-3057-4c4b-a785-0567365c84a9'::uuid));

CREATE POLICY "update_comment_policy" ON "public"."comment_dev" FOR UPDATE TO authenticated USING (('c41aa31d-3057-4c4b-a785-0567365c84a9'::uuid = auth.uid())) WITH CHECK (('c41aa31d-3057-4c4b-a785-0567365c84a9'::uuid = auth.uid()));

CREATE POLICY "update_tag_policy" ON "public"."tag" FOR UPDATE TO authenticated USING (('c41aa31d-3057-4c4b-a785-0567365c84a9'::uuid = auth.uid())) WITH CHECK (('c41aa31d-3057-4c4b-a785-0567365c84a9'::uuid = auth.uid()));

GRANT USAGE ON SCHEMA "public" TO "postgres";
GRANT USAGE ON SCHEMA "public" TO "anon";
GRANT USAGE ON SCHEMA "public" TO "authenticated";
GRANT USAGE ON SCHEMA "public" TO "service_role";

GRANT ALL ON FUNCTION "public"."views_increment"(x integer, row_id integer) TO "anon";
GRANT ALL ON FUNCTION "public"."views_increment"(x integer, row_id integer) TO "authenticated";
GRANT ALL ON FUNCTION "public"."views_increment"(x integer, row_id integer) TO "service_role";

GRANT ALL ON TABLE "public"."blog" TO "anon";
GRANT ALL ON TABLE "public"."blog" TO "authenticated";
GRANT ALL ON TABLE "public"."blog" TO "service_role";

GRANT ALL ON TABLE "public"."blogTag" TO "anon";
GRANT ALL ON TABLE "public"."blogTag" TO "authenticated";
GRANT ALL ON TABLE "public"."blogTag" TO "service_role";

GRANT ALL ON SEQUENCE "public"."blog_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."blog_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."blog_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."category" TO "anon";
GRANT ALL ON TABLE "public"."category" TO "authenticated";
GRANT ALL ON TABLE "public"."category" TO "service_role";

GRANT ALL ON SEQUENCE "public"."category_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."category_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."category_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."comment" TO "anon";
GRANT ALL ON TABLE "public"."comment" TO "authenticated";
GRANT ALL ON TABLE "public"."comment" TO "service_role";

GRANT ALL ON TABLE "public"."comment_dev" TO "anon";
GRANT ALL ON TABLE "public"."comment_dev" TO "authenticated";
GRANT ALL ON TABLE "public"."comment_dev" TO "service_role";

GRANT ALL ON SEQUENCE "public"."comment_dev_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."comment_dev_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."comment_dev_id_seq" TO "service_role";

GRANT ALL ON SEQUENCE "public"."comment_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."comment_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."comment_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."tag" TO "anon";
GRANT ALL ON TABLE "public"."tag" TO "authenticated";
GRANT ALL ON TABLE "public"."tag" TO "service_role";

GRANT ALL ON SEQUENCE "public"."tag_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."tag_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."tag_id_seq" TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "service_role";

RESET ALL;
